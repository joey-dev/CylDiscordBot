_0b0‍.x([["Roles",()=>Roles]]);class Roles {
    constructor(client, settings) {
        this.client = client;
        this.settings = settings;
        this.channelId = settings.serverId.general.roleAssignment.channel;

        this.setupRoles();

        this.waitForReactions();
        this.waitForReactionRemove();
    }

    setupRoles() {
        const channel = this.client.channels.cache.get(this.channelId);

        channel.messages.fetch({limit: 1})
            .then(messages => {
                this.sendOrEditMessage(messages, channel);
            })
            .catch(error => {
                console.error(error);
            });
    }

    sendOrEditMessage(messages, channel) {
        let message;
        if (messages.size === 0) {
            channel.send(this.settings.general.roleAssignmentMessage)
                .then(message => {
                    this.addRoleEmotions(message);
                });
        } else {
            message = messages.first();
            if (message.content !== this.settings.general.roleAssignmentMessage) {
                message.edit(this.settings.general.roleAssignmentMessage)
                    .then(() => {
                        this.addRoleEmotions(message);
                    });
            }
        }

    }

    addRoleEmotions(message) {
        for (const name in this.settings.general.roles) {
            message.react(this.client.emojis.cache.get(this.settings.general.roles[name].emojiId));
        }

        this.message = message;
    }

    waitForReactions() {
        this.client.on('messageReactionAdd', (reaction, user) => {
            if (user && !user.bot && reaction.message.channel.id === this.channelId) {
                const roles = this.settings.general.roles;
                const roleNames = Object.keys(roles);

                roleNames.forEach((name, index) => {
                    if (roles[name].emojiId === reaction.emoji.id) {
                        reaction.message.guild.roles.fetch(roles[name].roleId)
                            .then(role => {
                                reaction.message.guild.member(user).roles.add(role);
                            });
                    }
                });
            }
        });
    }

    waitForReactionRemove() {
        this.client.on('messageReactionRemove', (reaction, user) => {
            if (user && !user.bot && reaction.message.channel.id === this.channelId) {
                const roles = this.settings.general.roles;
                const roleNames = Object.keys(roles);

                roleNames.forEach((name, index) => {
                    if (roles[name].emojiId === reaction.emoji.id) {
                        reaction.message.guild.roles.fetch(roles[name].roleId)
                            .then(role => {
                                reaction.message.guild.member(user).roles.remove(role);
                            });
                    }
                })
            }
        });
    }

}
