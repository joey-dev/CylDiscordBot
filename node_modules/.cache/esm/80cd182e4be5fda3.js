_4be‍.x([["ScpSecretLaboratory",()=>ScpSecretLaboratory]]);class ScpSecretLaboratory {
    constructor(message, args, settings) {
        this.settings = settings.event;
        this.eventsId = settings.serverId.scpSecretLaboratory.events.channel;
        this.canceledEvent = settings.serverId.scpSecretLaboratory.canceled;

        this.stop(message, args);
    }

    stop(message, args) {
        const hostId = message.author.id;
        const {messageId, event} = this.getMessageIdAndEventAndRemoveEvent(hostId);

        if (!messageId) {
            this.doesNotHostEvent(message);
            return;
        }
        const eventsChannel = message.channel.guild.channels.cache.get(this.eventsId);

        const eventMessage = eventsChannel.messages.cache.filter(foundMessage => foundMessage.id === messageId).first();

        eventMessage.edit('Status: STOPPED \n\n' + eventMessage.content);

        message.reply(this.settings.scpSecretLaboratory.stop.success)
            .then(() => {
                message.delete();
            });

        const playerKeys = Object.keys(event.players);

        const messageToSend = this.canceledEvent
            .replace('//name//', event.hostname);

        for (let i = 0; i < playerKeys.length; i++) {
            const playerId = playerKeys[i];

            message.guild.members.fetch(playerId)
                .then(member => {
                    member.send(messageToSend);
                });
        }
    }

    getMessageIdAndEventAndRemoveEvent(hostId) {
        const fs = require('fs');

        const allEventsJson = fs.readFileSync('Events/scpSecretLaboratory.json');
        const events = JSON.parse(allEventsJson);

        for (let messageId in events) {
            if (events[messageId].hostId === hostId) {
                const event = events[messageId];
                const toReturn = {messageId, event};

                delete events[messageId];

                const jsonEvents = JSON.stringify(events);
                fs.writeFileSync('Events/scpSecretLaboratory.json', jsonEvents);

                return toReturn;
            }
        }

        return false;
    }

    doesNotHostEvent(message) {
        message.reply(this.settings.scpSecretLaboratory.stop.notHosting)
            .then(() => {
                message.delete();
            });
    }
}
