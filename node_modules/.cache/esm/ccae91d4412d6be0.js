_412‍.x([["RemoveReactionToEvent",()=>RemoveReactionToEvent]]);class RemoveReactionToEvent {
    constructor(client, settings) {
        this.client = client;
        this.settings = settings.event;
        this.scpSecretLaboratoryEventsChannelId = settings.serverId.scpSecretLaboratory.events.channel;

        this.client.on('messageReactionRemove', (reaction, user) => {
            if (user && !user.bot && reaction.message.channel.id === this.scpSecretLaboratoryEventsChannelId) {
                this.removePlayer(reaction, user);
            }
        });
    }

    removePlayer(reaction, user) {
        const fs = require('fs');

        const message = reaction.message;

        const eventsJson = fs.readFileSync('Events/scpSecretLaboratory.json');
        const events = JSON.parse(eventsJson);
        const eventKeys = Object.keys(events);

        const eventKey = eventKeys.filter(eventKey => eventKey === message.id);
        const event = events[eventKey];

        if (!event) {
            return;
        }

        const privateMessage = this.settings.scpSecretLaboratory.reaction.remove
            .replace('//name//', event.hostname)
            .replace('//time//', event.time);
        user.send(privateMessage);

        delete events[eventKey].players[user.id];

        const jsonEvents = JSON.stringify(events);

        fs.writeFileSync('Events/scpSecretLaboratory.json', jsonEvents);

        const updatedEvent = events[eventKey];
        const players = updatedEvent.players;
        const defaultMessage = updatedEvent.defaultMessage;

        let editedMessage = defaultMessage;
        if (players.length > 0) {
            editedMessage = '\n' + defaultMessage + '\n\n' + this.settings.scpSecretLaboratory.host.playersJoined;
        }

        for (let player in players) {
            editedMessage += '\n- ' + players[player]
        }

        message.edit(editedMessage);
    }

}
