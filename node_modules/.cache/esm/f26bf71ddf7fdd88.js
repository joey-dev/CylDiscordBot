_df7‍.x([["ScpSecretLaboratory",()=>ScpSecretLaboratory]]);class ScpSecretLaboratory {
    channelId = '738678196169474058';
    roleId = '740757384322089093';
    eventsId = '740768716072943678';

    constructor(message, args, settings) {
        this.host(message, args, settings);
    }

    host(message, args, settings) {
        const minPeople = args[0];
        const maxPeople = args[1];
        const ip = args[2];
        const time = args[3];

        if (minPeople === undefined || maxPeople === undefined || ip === undefined || time === undefined) {
            this.notFilledIn(message, settings);
            return;
        }

        if (this.isUserAlreadyHostingEvent(message)) {
            this.userAlreadyHostingEvent(settings);
            return;
        }

        const hostMessage = settings.scpSecretLaboratory.host
            .replace('//name//', message.author.username)
            .replace('//minPeople//', minPeople)
            .replace('//maxPeople//', maxPeople)
            .replace('//ip//', ip)
            .replace('//time//', time);

        const eventsChannel = message.channel.guild.channels.cache.get(this.eventsId);
        eventsChannel.send(hostMessage)
            .then(newMessage => {
                message.delete();

                newMessage.react('👋');

                const event = {
                    'hostId': message.author.id,
                    'minPeople': minPeople,
                    'maxPeople': maxPeople,
                    'ip': ip,
                    'time': time,
                    'started': false,
                    'ended': false,
                };

                const fs = require('fs');

                const allEventsJson = fs.readFileSync('Commands/Event/events.json');
                let events = {};
                if (allEventsJson) {
                    events = JSON.parse(allEventsJson);
                }

                events[newMessage.id] = event;

                const jsonEvents = JSON.stringify(events);

                fs.writeFileSync('Commands/Event/events.json', jsonEvents);
            });
    }

    notFilledIn(message, settings) {
        message.reply(settings.scpSecretLaboratory.notFilledIn)
            .then(() => {
                message.delete();
            });
    }

    isUserAlreadyHostingEvent(message) {
        const fs = require('fs');

        const usedId = message.author.id;

        const allEventsJson = fs.readFileSync('Commands/Event/events.json');
        const events = JSON.parse(allEventsJson);

        for (let messageId in events) {
            if (events[messageId].hostId === usedId && events[messageId].ended === false) {
                return true;
            }
        }

        return false;
    }

    userAlreadyHostingEvent(settings) {
        message.reply(settings.scpSecretLaboratory.userAlreadyHostingEvent)
            .then(() => {
                message.delete();
            });
    }

}
