_f76‍.x([["Commands",()=>Commands]]);class Commands {
    constructor(client, settings) {
        this.esmImport = require('esm')(module);

        client.on('message', message => {
            if (!message.content.startsWith(settings.general.commandPrefix) || message.author.bot) return;

            const args = message.content.slice(settings.general.commandPrefix.length).trim().split(' ');
            const fullCommand = args.shift().toLowerCase();
            const directory = fullCommand.split('-', 1)[0];
            const command = fullCommand.replace(directory + '-', '', 1);

            this.commandSwitchCase(directory, command, message, args, client, settings);
        });
    }

    commandSwitchCase(directory, command, message, args, client, settings) {
        switch (directory) {
            case 'help':
                this.helpDirectory(message, settings);
                break;
            case 'test':
                this.testDirectory(command, message, args, settings);
                break;
            case 'generalannouncements':
                this.generalAnnouncementsDirectory(command, message, args, client, settings);
                break;
            case 'event':
                this.eventDirectory(command, message, args, client, settings);
                break;
        }
    }

    helpDirectory(message, settings) {
        message.reply(settings.general.help)
            .then(() => {
                message.delete();
            });
    }

    testDirectory(command, message, args, settings) {
        const importTest = this.esmImport('./Tests');
        new importTest.Tests(command, message, args, settings);
    }

    generalAnnouncementsDirectory(command, message, args, client, settings) {
        const importGeneralAnnouncements = this.esmImport('./GeneralAnnouncements');
        new importGeneralAnnouncements.GeneralAnnouncements(command, message, args, client, settings);
    }

    eventDirectory(command, message, args, client, settings) {
        const importEvent = this.esmImport('./Event');
        new importEvent.Event(command, message, args, client, settings);
    }
}
