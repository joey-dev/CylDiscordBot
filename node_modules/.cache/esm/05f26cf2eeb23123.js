_eeb‍.x([["AddReactionToEvent",()=>AddReactionToEvent]]);class AddReactionToEvent {
    constructor(client, settings) {
        this.client = client;
        this.settings = settings.event;
        this.scpSecretLaboratoryEventsChannelId = settings.serverId.scpSecretLaboratory.events.channel;
        this.eventsId = settings.serverId.scpSecretLaboratory.events.channel;

        this.client.on('messageReactionAdd', (reaction, user) => {
            if (user && !user.bot && reaction.message.channel.id === this.scpSecretLaboratoryEventsChannelId) {
                this.checkEmoji(reaction, user);
            }
        });
    }

    checkEmoji(reaction, user) {
        switch (reaction.emoji.name) {
            case '👋':
                this.playingOnTime(reaction, user);
                break;
            case '❌':
                this.notPlaying(reaction, user);
                break
        }
    }

    playingOnTime(reaction, user) {
        const fs = require('fs');

        const message = reaction.message;

        const eventsJson = fs.readFileSync('Events/scpSecretLaboratory.json');
        const events = JSON.parse(eventsJson);
        const eventKeys = Object.keys(events);

        const eventKey = eventKeys.filter(eventKey => eventKey === message.id);
        const event = events[eventKey];

        if (!event) {
            return;
        }

        const privateMessage = this.settings.scpSecretLaboratory.reaction.add
            .replace('//name//', event.hostname)
            .replace('//time//', event.time);
        user.send(privateMessage);

        events[eventKey].players[user.id] = user.username;

        const jsonEvents = JSON.stringify(events);

        fs.writeFileSync('Events/scpSecretLaboratory.json', jsonEvents);

        const updatedEvent = events[eventKey];
        const players = updatedEvent.players;
        const defaultMessage = updatedEvent.defaultMessage;

        let editedMessage = '\n' + defaultMessage + '\n\n' + this.settings.scpSecretLaboratory.host.playersJoined;

        for (let player in players) {
            editedMessage += '\n- ' + players[player]
        }

        message.edit(editedMessage);

        this.checkIfCanStart(reaction, event);
    }

    notPlaying(reaction, user) {
        const fs = require('fs');

        const message = reaction.message;

        const eventsJson = fs.readFileSync('Events/scpSecretLaboratory.json');
        const events = JSON.parse(eventsJson);
        const eventKeys = Object.keys(events);

        const eventKey = eventKeys.filter(eventKey => eventKey === message.id);
        const event = events[eventKey];

        if (!event) {
            return;
        }

        events[eventKey].notPlaying[user.id] = user.username;

        const jsonEvents = JSON.stringify(events);

        fs.writeFileSync('Events/scpSecretLaboratory.json', jsonEvents);
    }

    checkIfCanStart(reaction, event) {
        if (event.time !== 'false' || event.minPeople === 'false' || parseInt(event.minPeople) > Object.keys(event.players).length) {
            return;
        }

        this.startEvent(event, reaction);
    }

    startEvent(event, reaction) {
        const messageId = event.messageId;

        const fs = require('fs');

        const allEventsJson = fs.readFileSync('Events/scpSecretLaboratory.json');
        const events = JSON.parse(allEventsJson);

        if (!events[messageId]) {
            console.error('cannot start event, not found in json! messageId: ' + messageId);
            return;
        }

        const newEvent = events[messageId];

        console.log(reaction);
        const guild = reaction.message.channel.guild;

        const eventsChannel = guild.channels.cache.get(this.eventsId);

        const eventMessage = eventsChannel.messages.cache.filter(foundMessage => foundMessage.id === messageId).first();

        eventMessage.edit('Status: STARTED \n\n' + eventMessage.content);

        delete events[messageId];

        const jsonEvents = JSON.stringify(events);
        fs.writeFileSync('Events/scpSecretLaboratory.json', jsonEvents);

        const messageToSend = this.settings.scpSecretLaboratory.isStarting.replace('//name//', newEvent.hostname);
        const keyPlayers = Object.keys(newEvent.players);

        for (let i = 0; i < keyPlayers.length; i++) {
            const playerId = keyPlayers[i];
            guild.members.fetch(playerId)
                .then(member => {
                    member.send(messageToSend);
                });
        }
    }
}
